# deploy/site.yml
- hosts: local
  become: true

  vars:
    app_dir: /opt/myapp               # path where your code lives
    node_major: "22"
    pnpm_version: "9.12.0"
    bun_version: "latest"

    app_user: app
    app_service_name: myapp
    app_port: 3000
    server_name: "_"                  # or your domain

    # Production env for your service
    app_env:
      NODE_ENV: production
      PORT: "{{ app_port }}"

  tasks:
    - name: Ensure base packages (Debian/Ubuntu)
      ansible.builtin.apt:
        name:
          - curl
          - ca-certificates
          - gnupg
          - build-essential
          - unzip
          - nginx
          - git
        state: present
        update_cache: true

    - name: Create app user and dir
      block:
        - name: Create app user
          ansible.builtin.user:
            name: "{{ app_user }}"
            system: true
            create_home: false
            shell: /usr/sbin/nologin

        - name: Ensure app directory exists
          ansible.builtin.file:
            path: "{{ app_dir }}"
            state: directory
            owner: "{{ app_user }}"
            group: "{{ app_user }}"
            mode: "0755"

    # --- Node.js 22.x from NodeSource (no SSH, just local install) ---
    - name: Add NodeSource GPG key
      ansible.builtin.get_url:
        url: https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key
        dest: /usr/share/keyrings/nodesource.gpg
        mode: "0644"

    - name: Add NodeSource repo
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/nodesource.list
        mode: "0644"
        content: |
          deb [signed-by=/usr/share/keyrings/nodesource.gpg] https://deb.nodesource.com/node_{{ node_major }}.x nodistro main

    - name: Install Node.js {{ node_major }}.x
      ansible.builtin.apt:
        name: nodejs
        state: present
        update_cache: true

    # --- pnpm via corepack (local) ---
    - name: Enable corepack
      ansible.builtin.command: corepack enable
      changed_when: false

    - name: Pin pnpm version
      ansible.builtin.command: corepack prepare pnpm@{{ pnpm_version }} --activate
      changed_when: false

    # --- Bun (local) ---
    - name: Install Bun
      ansible.builtin.shell: |
        set -e
        if [ ! -x /usr/local/bin/bun ]; then
          curl -fsSL https://bun.sh/install | bash
          ln -sf /root/.bun/bin/bun /usr/local/bin/bun
        fi

    # --- Dependencies & build (runs as app user) ---
    - name: Install node modules
      ansible.builtin.shell: |
        set -e
        cd "{{ app_dir }}"
        pnpm install --frozen-lockfile || pnpm install
      args:
        chdir: "{{ app_dir }}"
      environment:
        PATH: "/usr/local/bin:/usr/bin:{{ ansible_env.PATH }}"
      become_user: "{{ app_user }}"

    - name: Write production .env
      ansible.builtin.copy:
        dest: "{{ app_dir }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: "0640"
        content: |
          {% for k, v in app_env.items() -%}
          {{ k }}={{ v }}
          {% endfor %}

    - name: Build server & client
      ansible.builtin.shell: |
        set -e
        cd "{{ app_dir }}"
        pnpm run build
      args:
        chdir: "{{ app_dir }}"
      environment:
        PATH: "/usr/local/bin:/usr/bin:{{ ansible_env.PATH }}"
      become_user: "{{ app_user }}"

    # --- systemd service (local) ---
    - name: Install systemd unit
      ansible.builtin.template:
        src: templates/app.service.j2
        dest: /etc/systemd/system/{{ app_service_name }}.service
        mode: "0644"
      notify: [daemon-reload, restart app]

    # --- Nginx config (local) ---
    - name: Write Nginx site
      ansible.builtin.template:
        src: templates/nginx-site.conf.j2
        dest: /etc/nginx/sites-available/{{ app_service_name }}
        mode: "0644"

    - name: Enable site
      ansible.builtin.file:
        src: /etc/nginx/sites-available/{{ app_service_name }}
        dest: /etc/nginx/sites-enabled/{{ app_service_name }}
        state: link
        force: true
      notify: [reload nginx]

    - name: Disable default site
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: [reload nginx]

    - name: Enable & start services locally
      block:
        - name: Ensure app service enabled & started
          ansible.builtin.systemd:
            name: "{{ app_service_name }}"
            enabled: true
            state: started

        - name: Ensure nginx enabled & started
          ansible.builtin.systemd:
            name: nginx
            enabled: true
            state: started

  handlers:
    - name: daemon-reload
      ansible.builtin.systemd:
        daemon_reload: true

    - name: restart app
      ansible.builtin.systemd:
        name: "{{ app_service_name }}"
        state: restarted

    - name: reload nginx
      ansible.builtin.systemd:
        name: nginx
        state: reloaded